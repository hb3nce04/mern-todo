openapi: 3.0.3
info:
  title: Backend API
  description: RestAPI documentation for a simple TODO app built with MERN stack.
  version: "1.0"
servers:
  - url: http://localhost:3000/api
paths:
  /users:
    post:
      summary: Register a New User
      description: This endpoint allows you to register a new user in the system. Provide the necessary user details in the request body.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            examples:
              user:
                summary: Sample User
                value:
                  name: John Doe
                  email: john.doe@example.com
                  password: password123
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                user:
                  summary: Created User
                  value:
                    id: "60d0fe4f5311236168a109ca"
                    name: John Doe
                    email: john.doe@example.com
        "400":
          description: Invalid input, object invalid
        "500":
          description: Internal server error
  /auth/login:
    post:
      summary: Login User
      description: This endpoint allows a user to log in. Provide the email and password in the request body.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
            examples:
              login:
                summary: Sample Login
                value:
                  email: john.doe@example.com
                  password: password123
      responses:
        "200":
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                user:
                  summary: Logged In User
                  value:
                    id: "60d0fe4f5311236168a109ca"
                    name: John Doe
                    email: john.doe@example.com
        "401":
          description: Unauthorized access. Please check your credentials
        "500":
          description: Internal server error
  /auth/google/callback:
    post:
      summary: Google Authentication Callback
      description: This endpoint handles the Google authentication callback. Provide the Google token in the request body.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            examples:
              googleAuth:
                summary: Sample Google Auth
                value:
                  token: eyJhbGciOiJSUzI1NiIsImtpZCI6Ij...
      responses:
        "200":
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                user:
                  summary: Logged In User
                  value:
                    id: "60d0fe4f5311236168a109ca"
                    name: John Doe
                    email: john.doe@example.com
        "401":
          description: Invalid Google token
        "500":
          description: Internal server error
  /tasks:
    get:
      summary: Get All Tasks
      description: Fetches a list of all tasks available in the system. This endpoint returns an array of task objects.
      tags:
        - Tasks
      responses:
        "200":
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
              examples:
                tasks:
                  summary: Sample Tasks
                  value:
                    - id: "60d0fe4f5311236168a109cb"
                      title: Task 1
                      description: Description for Task 1
                      completed: false
                    - id: "60d0fe4f5311236168a109cc"
                      title: Task 2
                      description: Description for Task 2
                      completed: true
        "500":
          description: Internal server error
    post:
      summary: Create a New Task
      description: Creates a new task in the system. Provide the task details in the request body.
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
            examples:
              task:
                summary: Sample Task
                value:
                  title: New Task
                  description: Description of the new task
                  completed: false
      responses:
        "201":
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
              examples:
                task:
                  summary: Created Task
                  value:
                    id: "60d0fe4f5311236168a109cd"
                    title: New Task
                    description: Description of the new task
                    completed: false
        "400":
          description: Invalid input, object invalid
        "500":
          description: Internal server error
  /tasks/{id}:
    get:
      summary: Get Task by ID
      description: Fetches a task by its ID. Provide the task ID in the path parameter.
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the task to retrieve
      responses:
        "200":
          description: The requested task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
              examples:
                task:
                  summary: Sample Task
                  value:
                    id: "60d0fe4f5311236168a109cb"
                    title: Task 1
                    description: Description for Task 1
                    completed: false
        "404":
          description: Task not found
        "500":
          description: Internal server error
    put:
      summary: Update Task by ID
      description: Updates a task by its ID. Provide the task ID in the path parameter and the updated task details in the request body.
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the task to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
            examples:
              task:
                summary: Updated Task
                value:
                  title: Updated Task
                  description: Updated description of the task
                  completed: true
      responses:
        "200":
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
              examples:
                task:
                  summary: Updated Task
                  value:
                    id: "60d0fe4f5311236168a109cb"
                    title: Updated Task
                    description: Updated description of the task
                    completed: true
        "400":
          description: Invalid input, object invalid
        "404":
          description: Task not found
        "500":
          description: Internal server error
    delete:
      summary: Delete Task by ID
      description: Deletes a task by its ID. Provide the task ID in the path parameter.
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the task to delete
      responses:
        "200":
          description: Task deleted successfully
        "404":
          description: Task not found
        "500":
          description: Internal server error
components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: string
          example: "60d0fe4f5311236168a109cb"
        title:
          type: string
          example: New Task
        description:
          type: string
          example: Description of the new task
        dueDate:
          type: string
          format: date-time
          example: "2023-12-31T23:59:59Z"
        priority:
          type: string
          enum:
            - Low
            - Medium
            - High
          example: High
        completed:
          type: boolean
          example: false
      required:
        - title
        - description
        - dueDate
        - priority
        - completed
    User:
      type: object
      properties:
        id:
          type: string
          example: "60d0fe4f5311236168a109ca"
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        password:
          type: string
          example: password123
      required:
        - name
        - email
        - password
    Login:
      type: object
      properties:
        email:
          type: string
          example: john.doe@example.com
        password:
          type: string
          example: password123
